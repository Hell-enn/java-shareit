package ru.practicum.shareit.user.service;

import ru.practicum.shareit.user.dto.UserDto;

import java.util.List;

/**
 * Интерфейс-сервис UserService определяет контракт,
 * включающий сигнатуры ряда методов, которые реализуют
 * расширяющие его классы слоя бизнес-логики
 * в части работы с пользователями приложения ShareIt.
 */
public interface UserService {

    /**
     * Включает валидацию объекта типа UserDto перед
     * перенаправлением его в слой доступа к данным (метод добавления нового пользователя),
     * а также последующее преобразование возвращаемого из хранилища объекта
     * типа User в UserDto.
     *
     * @param userDto (объект пользователя, содержащий информацию о нем,
     *                которую необходимо занести в хранилище)
     * @return UserDto
     */
    UserDto postUser(UserDto userDto);


    /**
     * Включает перенаправление объекта типа UserDto
     * в слой доступа к данным (метод обновления уже существующего пользователя),
     * а также последующее преобразование
     * возвращаемого из хранилища объекта типа User в UserDto.
     *
     * @param userId (идентификатор объекта типа User, который нужно обновить
     *           в хранилище)
     * @param userDto (объект, содержащий информацию о пользователе,
     *                которую необходимо обновить в хранилище)
     *
     * @return UserDto
     */
    UserDto patchUser(Long userId, UserDto userDto);


    /**
     * Включает маршрутизацию в слой доступа к данным
     * (метод извлечения из хранилища всех пользователей),
     * а также последующее преобразование полученного списка
     * объектов типа User в список объектов типа UserDto.
     *
     * @return List<UserDto>
     */
    List<UserDto> getUsers();


    /**
     * Включает маршрутизацию в слой доступа к данным
     * (метод удаления из хранилища пользователя с идентификатором userId).
     *
     * @param userId (идентификатор объекта типа User, который нужно удалить
     *                из хранилища)
     */
    void deleteUser(Long userId);


    /**
     * Включает маршрутизацию в слой доступа к данным
     * (метод получения из хранилища объекта типа User с идентификатором userId),
     * а также последующее преобразование этого объекта в тип UserDto.
     *
     * @param userId (идентификатор объекта типа User, который нужно извлечь
     *                из хранилища)
     *
     * @return UserDto
     */
    UserDto getUser(Long userId);
}
